package com.erp.hrm.service.impl;

import com.erp.hrm.api.dto.*;
import com.erp.hrm.domain.*;
import com.erp.hrm.repository.employee.*;
import com.erp.hrm.service.EmployeeCRUDService;
import com.erp.hrm.util.ActionResult;
import com.erp.hrm.util.BulkInsetUtil;
import org.springframework.stereotype.Service;

import javax.persistence.EntityManagerFactory;
import java.util.ArrayList;
import java.util.List;

@Service
public class EmployeeCRUDServiceImpl implements EmployeeCRUDService {
    private EmployeeInfoRepository employeeInfoRepository;
    private EmployeeOfficeInfoRepository officeInfoRepository;
    private EmployeeRuleInfoRepository ruleInfoRepository;
    private EmployeeEmergencyInfoRepository emergencyInfoRepository;
    private EmployeeEducationInfoRepository educationInfoRepository;
    private EmployeePQualificationInfoRepository pQualificationInfoRepository;
    private EmployeeLanguageInfoRepository languageInfoRepository;
    private EmployeeJobHistoryInfoRepository jobHistoryInfoRepository;
    private EmployeeFamilyInfoRepository familyInfoRepository;

    private GratuityNomineeRepository gratuityNomineeRepository;
    private InsuranceNomineeRepository insuranceNomineeRepository;
    private MedicalNomineeRepository medicalNomineeRepository;
    private PFNomineeRepository pfNomineeRepository;
    private NomineeRepository nomineeRepository;

    private EntityManagerFactory emf;


    public EmployeeCRUDServiceImpl(EmployeeInfoRepository employeeInfoRepository, EmployeeOfficeInfoRepository officeInfoRepository,
                                   EmployeeRuleInfoRepository ruleInfoRepository, EmployeeEmergencyInfoRepository emergencyInfoRepository,
                                   EmployeeEducationInfoRepository educationInfoRepository, EmployeePQualificationInfoRepository pQualificationInfoRepository,
                                   EmployeeLanguageInfoRepository languageInfoRepository, EmployeeJobHistoryInfoRepository jobHistoryInfoRepository,
                                   EmployeeFamilyInfoRepository familyInfoRepository, GratuityNomineeRepository gratuityNomineeRepository,
                                   InsuranceNomineeRepository insuranceNomineeRepository, MedicalNomineeRepository medicalNomineeRepository,
                                   PFNomineeRepository pfNomineeRepository, NomineeRepository nomineeRepository,
                                   EntityManagerFactory emf) {
        this.employeeInfoRepository = employeeInfoRepository;
        this.officeInfoRepository = officeInfoRepository;
        this.ruleInfoRepository = ruleInfoRepository;
        this.emergencyInfoRepository = emergencyInfoRepository;
        this.educationInfoRepository = educationInfoRepository;
        this.pQualificationInfoRepository = pQualificationInfoRepository;
        this.languageInfoRepository = languageInfoRepository;
        this.jobHistoryInfoRepository = jobHistoryInfoRepository;
        this.familyInfoRepository = familyInfoRepository;
        this.gratuityNomineeRepository = gratuityNomineeRepository;
        this.insuranceNomineeRepository = insuranceNomineeRepository;
        this.medicalNomineeRepository = medicalNomineeRepository;
        this.pfNomineeRepository = pfNomineeRepository;
        this.nomineeRepository = nomineeRepository;
        this.emf = emf;
    }

    private String getAutoGeneratedEmployeeCode(){
        //To Do
        int totalNumberOfEmp = (int) employeeInfoRepository.count();
        int currentEmpNumber = totalNumberOfEmp + 1;
        String vEmployeeCode = "EMP"+currentEmpNumber;
        return vEmployeeCode;
    }

    @Override
    public ActionResult saveGeneralInfo(EmployeeGeneralInfoDTO dto) {
        String successMessage = "Employee updated successfully!";
        ActionResult actionResult = new ActionResult();

        try{
            EmployeeInfo info = employeeInfoRepository.findOne(dto.getEmployeeCode());
            if(info == null){
                info = new EmployeeInfo();
                info.setEmployeeCode(this.getAutoGeneratedEmployeeCode());
                successMessage = "Employee saved successfully!";
            }
            info.setFirstName(dto.getFirstName());
            info.setMiddleName(dto.getMiddleName());
            info.setLastName(dto.getLastName());
            info.setNickName(dto.getNickName());
            info.setSalutation(dto.getSalutation());
            info.setFathersName(dto.getFathersName());
            info.setMothersName(dto.getMothersName());
            info.setEmployeeStatus(dto.getEmployeeStatus());
            info.setNid(dto.getNid());
            info.setDisplayEmployeeCode(dto.getDisplayEmployeeCode());
            info.setPunchCardNo(dto.getPunchCardNo());
            info.setEmployeeType(dto.getEmployeeType());
            info.setWorkerEmploymentType(dto.getWorkerEmploymentType());
            info.setPresentAddress(dto.getPresentAddress());
            info.setPresentPS(dto.getPresentPS());
            info.setPresentZIPCode(dto.getPresentZIPCode());
            info.setPresentDistrict(dto.getPresentDistrict());
            info.setPresentCountry(dto.getPresentCountry());

            try {
                info.setPermanentSame(dto.getIsPermanentSame());
            }
            catch (Exception e){
                info.setPermanentSame(false);
            }

            info.setPermanentAddress(dto.getPermanentAddress());
            info.setPermanentPS(dto.getPermanentPS());
            info.setPermanentZIPCode(dto.getPermanentZIPCode());
            info.setPermanentDistrict(dto.getPermanentDistrict());
            info.setPermanentCountry(dto.getPermanentCountry());
            info.setMaritalStatus(dto.getMaritalStatus());
            info.setSpouseName(dto.getSpouseName());
            info.setSpouseOccupation(dto.getSpouseOccupation());
            info.setNoOfChildren(dto.getNoOfChildren());
            info.setDob(dto.getDob());
            info.setGender(dto.getGender());
            info.setReligion(dto.getReligion());
            info.setNationality(dto.getNationality());
            info.setBloodGroup(dto.getBloodGroup());
            info.setPhone(dto.getPhone());
            info.setEmail(dto.getEmail());
            info.setReferenceAddress(dto.getReferenceAddress());
            info.setPersonalRemarks(dto.getPersonalRemarks());
            info.setEmpImage(dto.getEmpImage());
            info.setEmpSignature(dto.getEmpSignature());
            info.setDelete(false);
            info.setCandidate(false);

            info.setProcessed(false);
            employeeInfoRepository.save(info);
            //Set custom message if success
            actionResult.setEmployeeCode(info.getEmployeeCode());
            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage(successMessage);
        }
        catch (Exception e){
            //Set custom message if error
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }

        return actionResult;
    }

    @Override
    public EmployeeGeneralInfoDTO getEmployeeInfo(String pEmployeeCode) {
        EmployeeGeneralInfoDTO dto = new EmployeeGeneralInfoDTO();

        EmployeeInfo info = employeeInfoRepository.findOne(pEmployeeCode);
        if(info == null)
            throw new RuntimeException("Employee Not available");
        dto.setEmployeeCode(info.getEmployeeCode());
        dto.setFirstName(info.getFirstName());
        dto.setMiddleName(info.getMiddleName());
        dto.setLastName(info.getLastName());
        dto.setNickName(info.getNickName());
        dto.setSalutation(info.getSalutation());
        dto.setFathersName(info.getFathersName());
        dto.setMothersName(info.getMothersName());
        dto.setEmployeeStatus(info.getEmployeeStatus());
        dto.setNid(info.getNid());
        dto.setDisplayEmployeeCode(info.getDisplayEmployeeCode());
        dto.setPunchCardNo(info.getPunchCardNo());
        dto.setEmployeeType(info.getEmployeeType());
        dto.setWorkerEmploymentType(info.getWorkerEmploymentType());
        dto.setPresentAddress(info.getPresentAddress());
        dto.setPresentPS(info.getPresentPS());
        dto.setPresentZIPCode(info.getPresentZIPCode());
        dto.setPresentDistrict(info.getPresentDistrict());
        dto.setPresentCountry(info.getPresentCountry());

        try {
            dto.setIsPermanentSame(info.isPermanentSame());
        }
        catch (Exception e){
            dto.setIsPermanentSame(false);
        }

        dto.setPermanentAddress(info.getPermanentAddress());
        dto.setPermanentPS(info.getPermanentPS());
        dto.setPermanentZIPCode(info.getPermanentZIPCode());
        dto.setPermanentDistrict(info.getPermanentDistrict());
        dto.setPermanentCountry(info.getPermanentCountry());
        dto.setMaritalStatus(info.getMaritalStatus());
        dto.setSpouseName(info.getSpouseName());
        dto.setSpouseOccupation(info.getSpouseOccupation());
        dto.setNoOfChildren(info.getNoOfChildren());
        dto.setDob(info.getDob());
        dto.setGender(info.getGender());
        dto.setReligion(info.getReligion());
        dto.setNationality(info.getNationality());
        dto.setBloodGroup(info.getBloodGroup());
        dto.setPhone(info.getPhone());
        dto.setEmail(info.getEmail());
        dto.setReferenceAddress(info.getReferenceAddress());
        dto.setPersonalRemarks(info.getPersonalRemarks());
        dto.setEmpImage(info.getEmpImage());
        dto.setEmpSignature(info.getEmpSignature());
        dto.setDelete(false);
        return dto;
    }

    @Override
    public ActionResult saveOfficialInfo(EmployeeOfficeInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try{
            EmployeeInfo employeeInfo = employeeInfoRepository.findOne(dto.getEmployeeCode());
            EmployeeOfficeInfo info = officeInfoRepository.get(dto.getEmployeeCode());
            if(employeeInfo == null){
                throw new RuntimeException("Employee Code not available");
            }
            if(info == null){
                info = new EmployeeOfficeInfo();
                info.setEmployeeInfo(employeeInfo);
            }
            info.setPosition(dto.getPosition());
            info.setPositionName(dto.getPositionName());
            info.setGivenDesignation(dto.getGivenDesignation());
            info.setUnit(dto.getUnit());
            info.setDivision(dto.getDivision());
            info.setDepartment(dto.getDepartment());
            info.setDesignation(dto.getDesignation());
            info.setSection(dto.getSection());
            info.setSubSection(dto.getSubSection());
            info.setStaffCategory(dto.getStaffCategory());
            info.setJobLocation(dto.getJobLocation());
            info.setSkillCategoryName(dto.getSkillCategoryName());
            info.setOperationCode(dto.getOperationCode());
            info.setDoj(dto.getDoj());
            info.setDoc(dto.getDoc());
            info.setDos(dto.getDos());
            info.setGovtDesignation(dto.getGovtDesignation());
            info.setCostCenter(dto.getCostCenter());
            info.setBioRegNo(dto.getBioRegNo());
            info.setOtEntitledDate(dto.getIsOtEntitledDate());
            info.setPfEntitledDate(dto.getPfEntitledDate());
            info.setPfAccNo(dto.getPfAccNo());
            info.setInsuranceCompany(dto.getInsuranceCompany());
            info.setInsuranceAccount(dto.getInsuranceAccount());
            info.setServiceLength(dto.getServiceLength());
            info.setYearMonth(dto.getYearMonth());
            info.setPassword(dto.getPassword());
            info.setSpecialMedicalNote(dto.getSpecialMedicalNote());
            info.setAdminReportingPerson(dto.getAdminReportingPerson());
            info.setFunctionalReportingPerson(dto.getFunctionalReportingPerson());

            try {
                info.setOT(dto.getIsOT());
            }catch (Exception e){
                info.setOT(false);
            }
            try {
                info.setOffDayOT(dto.getIsOffDayOT());
            }catch (Exception e){
                info.setOffDayOT(false);
            }
            try {
                info.setHolidayBonus(dto.getIsHolidayBonus());
            }catch (Exception e){
                info.setHolidayBonus(false);
            }
            try {
                info.setPF(dto.getIsPF());
            }catch (Exception e){
                info.setPF(false);
            }
            try {
                info.setInsuranceEntitled(dto.getIsInsuranceEntitled());
            }catch (Exception e){
                info.setInsuranceEntitled(false);
            }
            try {
                info.setConsiderServiceLength(dto.isConsiderServiceLength());
            }catch (Exception ex){
                info.setConsiderServiceLength(false);
            }
            try {
                info.setActiveSelfService(dto.isActiveSelfService());
            }catch (Exception ex){
                info.setActiveSelfService(false);
            }

            officeInfoRepository.save(info);


            employeeInfo.setProcessed(false);
            employeeInfoRepository.save(employeeInfo);


            //Set custom message if success
            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("Offical Info saved successfully!");
        }
        catch (Exception e){
            //Set custom message if error
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }

        return actionResult;
    }

    @Override
    public EmployeeOfficeInfoDTO getEmployeeOfficeInfo(String pEmployeeCode) {
        EmployeeOfficeInfoDTO dto = new EmployeeOfficeInfoDTO();

        EmployeeOfficeInfo info = officeInfoRepository.get(pEmployeeCode);
        dto.setId(info.getId());
        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setPosition(info.getPosition());
        dto.setPositionName(info.getPositionName());
        dto.setGivenDesignation(info.getGivenDesignation());
        dto.setUnit(info.getUnit());
        dto.setDivision(info.getDivision());
        dto.setDepartment(info.getDepartment());
        dto.setDesignation(info.getDesignation());
        dto.setSection(info.getSection());
        dto.setSubSection(info.getSubSection());
        dto.setStaffCategory(info.getStaffCategory());
        dto.setJobLocation(info.getJobLocation());
        dto.setSkillCategoryName(info.getSkillCategoryName());
        dto.setOperationCode(info.getOperationCode());
        dto.setDoj(info.getDoj());
        dto.setDoc(info.getDoc());
        dto.setDos(info.getDos());
        dto.setGovtDesignation(info.getGovtDesignation());
        dto.setCostCenter(info.getCostCenter());
        dto.setBioRegNo(info.getBioRegNo());
        dto.setIsOtEntitledDate(info.getOtEntitledDate());
        dto.setPfEntitledDate(info.getPfEntitledDate());
        dto.setPfAccNo(info.getPfAccNo());
        dto.setInsuranceCompany(info.getInsuranceCompany());
        dto.setInsuranceAccount(info.getInsuranceAccount());
        dto.setServiceLength(info.getServiceLength());
        dto.setYearMonth(info.getYearMonth());
        dto.setPassword(info.getPassword());
        dto.setSpecialMedicalNote(info.getSpecialMedicalNote());
        dto.setAdminReportingPerson(info.getAdminReportingPerson());
        dto.setFunctionalReportingPerson(info.getFunctionalReportingPerson());

        try {
            dto.setIsOT(info.isOT());
        }catch (Exception e){
            dto.setIsOT(false);
        }
        try {
            dto.setIsOffDayOT(info.isOffDayOT());
        }catch (Exception e){
            dto.setIsOffDayOT(false);
        }
        try {
            dto.setIsHolidayBonus(info.isHolidayBonus());
        }catch (Exception e){
            dto.setIsHolidayBonus(false);
        }
        try {
            dto.setIsPF(info.isPF());
        }catch (Exception e){
            dto.setIsPF(false);
        }
        try {
            dto.setInsuranceEntitled(info.isInsuranceEntitled());
        }catch (Exception e){
            dto.setInsuranceEntitled(false);
        }
        try {
            dto.setConsiderServiceLength(dto.isConsiderServiceLength());
        }catch (Exception ex){
            dto.setConsiderServiceLength(false);
        }
        try {
            dto.setActiveSelfService(dto.isActiveSelfService());
        }catch (Exception ex){
            dto.setActiveSelfService(false);
        }

        return dto;
    }

    @Override
    public ActionResult saveRuleInfo(EmployeeRuleInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
            EmployeeInfo employeeInfo = employeeInfoRepository.findOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            EmployeeRuleInfo info = ruleInfoRepository.get(dto.getEmployeeCode());
            if(info == null) {
                info = new EmployeeRuleInfo();
                info.setEmployeeInfo(employeeInfo);
            }
            info.setLeaveRuleCode(dto.getLeaveRuleCode());
            info.setSalaryGradeCode(dto.getSalaryGradeCode());
            info.setAttendanceRuleCode(dto.getAttendanceRuleCode());
            info.setMaternityLeaveRuleCode(dto.getMaternityLeaveRuleCode());
            info.setPaymentPolicyRuleCode(dto.getPaymentPolicy());
            info.setCurrencyRuleCode(dto.getCurrencyRuleCode());
            info.setIsRosterApplicable(dto.isIfRoasterApplicable());

            if(dto.isIfRoasterApplicable()){
                info.setShiftRuleCode(dto.getShiftRosterRule());
                info.setShiftID(null);
            }else{
                info.setShiftRuleCode(null);
                info.setShiftID(dto.getShiftPlan());
            }
            info.setDefaultWorkOfStartDate(dto.getDos());
            info.setBankName(dto.getBankName());
            info.setBranchName(dto.getBranchName());
            info.setAccountNo(dto.getAccountNo());
           info.setAccountName(dto.getAccountName());

            ruleInfoRepository.save(info);

            employeeInfo.setProcessed(false);
            employeeInfoRepository.save(employeeInfo);

            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("RuleInfo saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public EmployeeRuleInfoDTO getEmployeeRuleInfo(String pEmployeeCode) {
        EmployeeRuleInfoDTO dto = new EmployeeRuleInfoDTO();

        EmployeeRuleInfo info = ruleInfoRepository.get(pEmployeeCode);
        if (info == null) {
            throw new RuntimeException("Employee Code not available");
        }
        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setLeaveRuleCode(info.getLeaveRuleCode());
        dto.setSalaryGradeCode(info.getSalaryGradeCode());
        dto.setAttendanceRuleCode(info.getAttendanceRuleCode());
        dto.setMaternityLeaveRuleCode(info.getMaternityLeaveRuleCode());
        dto.setPaymentPolicy(info.getPaymentPolicyRuleCode());
        dto.setCurrencyRuleCode(info.getCurrencyRuleCode());
        dto.setIfRoasterApplicable(info.isRosterApplicable());
        dto.setShiftRosterRule(info.getShiftRuleCode());
        dto.setShiftPlan(info.getShiftID());
        dto.setDos(info.getDefaultWorkOfStartDate());
        dto.setBankName(info.getBankName());
        dto.setBranchName(info.getBranchName());
        dto.setAccountNo(info.getAccountNo());
        dto.setAccountName(info.getAccountName());

        return  dto;
    }

    @Override
    public ActionResult saveEmergencyInfo(EmployeeEmergencyInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
            EmployeeInfo employeeInfo = employeeInfoRepository.findOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            EmergencyPersonInfo info = emergencyInfoRepository.get(dto.getEmployeeCode());
            if(info == null) {
                info = new EmergencyPersonInfo();
                info.setEmployeeInfo(employeeInfo);
            }
            info.setName(dto.getName());
            info.setAddress(dto.getAddress());
            info.setPhone(dto.getPhone());
            info.setEmail(dto.getEmail());
            info.setRelationship(dto.getRelationship());
            info.setSequenceNo(1);

            emergencyInfoRepository.save(info);
            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("Emergency Person Info saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    /*@Override
    public List<EmployeeEmergencyInfoDTO> getEmergencyPersonInfoList(String pEmployeeCode) {
        List<EmergencyPersonInfo> infoList = emergencyInfoRepository.getAllByEmpCode(pEmployeeCode);
        List<EmployeeEmergencyInfoDTO> dtoList = new ArrayList<>();
        for(int i = 0; i < infoList.size(); i++){
            dtoList.add(getEmployeeEmergencyInfoDTO(infoList.get(i)));
        }
        return dtoList;
    }*/

    @Override
    public EmployeeEmergencyInfoDTO getEmergencyPersonInfo(String pEmployeeCode) {
        return getEmployeeEmergencyInfoDTO(emergencyInfoRepository.get(pEmployeeCode));
    }

    private EmployeeEmergencyInfoDTO getEmployeeEmergencyInfoDTO(EmergencyPersonInfo info) {

        if (info == null) {
            throw new RuntimeException("Employee Code not available");
        }

        EmployeeEmergencyInfoDTO dto = new EmployeeEmergencyInfoDTO();
     //   dto.setId(info.getId());
        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setName(info.getName());
        dto.setAddress(info.getAddress());
        dto.setPhone(info.getPhone());
        dto.setEmail(info.getEmail());
        dto.setRelationship(info.getRelationship());
     //   dto.setSequence(info.getSequenceNo());

        return  dto;
    }

    @Override
    public ActionResult saveEducationalInfo(EmployeeEducationInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
            EmployeeInfo employeeInfo = employeeInfoRepository.findOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            EducationInfo info = educationInfoRepository.get(dto.getId());
            if(info == null) {
                info = new EducationInfo();
                info.setEmployeeInfo(employeeInfo);
            }
            info.setExamName(dto.getExamName());
            info.setInstituteName(dto.getInstituteName());
            info.setWhichGroup(dto.getWhichGroup());
            info.setExaminationRoll(dto.getExaminationRoll());
            info.setRegistrationNo(dto.getRegistrationNo());
            info.setResult(dto.getResult());
            info.setCountry(dto.getCountry());
            info.setExamYear(dto.getExamYear());
//            info.setBoard(dto.getBoard());
//            info.setMarkAvail(dto.getMarkAvail());
//            try {
//                info.setIsCGPA(dto.isCGPA());
//            }
//            catch (Exception e){
                info.setCGPA(false);
//            }
            educationInfoRepository.save(info);
            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("Education Info saved successfully!");

        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public List<EmployeeEducationInfoDTO> getEducationInfoList(String pEmployeeCode) {
        List<EmployeeEducationInfoDTO> dtoList = new ArrayList<>();
        List<EducationInfo> infoList = educationInfoRepository.getAllByEmpCode(pEmployeeCode);

        for(int i = 0; i < infoList.size(); i++){
            dtoList.add(getEmployeeEducationInfoDTO(infoList.get(i)));
        }

        return  dtoList;
    }

    @Override
    public EmployeeEducationInfoDTO getEducationInfo(Long Id) {
        return getEmployeeEducationInfoDTO(educationInfoRepository.get(Id));
    }

    private  EmployeeEducationInfoDTO getEmployeeEducationInfoDTO( EducationInfo info){
        EmployeeEducationInfoDTO dto = new EmployeeEducationInfoDTO();

        if (info == null) {
            throw new RuntimeException("Employee Code not available");
        }
        dto.setId(info.getId());
        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setExamName(info.getExamName());
        dto.setInstituteName(info.getInstituteName());
        dto.setWhichGroup(info.getWhichGroup());
        dto.setExaminationRoll(info.getExaminationRoll());
        dto.setRegistrationNo(info.getRegistrationNo());
        dto.setResult(info.getResult());
        dto.setCountry(info.getCountry());
        dto.setExamYear(info.getExamYear());


        return  dto;
    }

    @Override
    public ActionResult savePQualificationInfo(EmployeeProfessionalQualificationDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
            EmployeeInfo employeeInfo = employeeInfoRepository.findOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            ProfessionalQualification info = pQualificationInfoRepository.get(dto.getId());
            if(info == null)
                info = new ProfessionalQualification();
            info.setEmployeeInfo(employeeInfo);
            info.setCertificationName(dto.getCertificationName());
            info.setCertificationNo(dto.getCertificationNo());
            info.setCourseDuration(dto.getCourseDuration());
            info.setIssuedBy(dto.getIssuedBy());
            info.setCountry(dto.getCountry());
            info.setCertifiedDate(dto.getCertifiedDate());
            info.setExpiryDate(dto.getExpiryDate());
            info.setPassingYear(0);
            info.setNotes(dto.getNotes());

            pQualificationInfoRepository.save(info);

            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("ProfessionQualification saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public List<EmployeeProfessionalQualificationDTO> getPQualificationInfoList(String pEmployeeCode) {
        List< EmployeeProfessionalQualificationDTO> dtoList = new ArrayList<>();

        List<ProfessionalQualification> infoList = pQualificationInfoRepository.getAllByEmpCode(pEmployeeCode);

        for(int i = 0; i < infoList.size(); i++){
            dtoList.add(getEmployeeProfessionalQualificationDTO(infoList.get(i)));
        }
        return  dtoList;
    }
    @Override
    public EmployeeProfessionalQualificationDTO getPQualificationInfo(Long Id) {
        return getEmployeeProfessionalQualificationDTO(pQualificationInfoRepository.getOne(Id));

    }
    private EmployeeProfessionalQualificationDTO getEmployeeProfessionalQualificationDTO( ProfessionalQualification info){
        EmployeeProfessionalQualificationDTO dto = new EmployeeProfessionalQualificationDTO();

        if (info == null) {
            throw new RuntimeException("Employee Code not available");
        }
        dto.setId(info.getId());
        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setCertificationName(info.getCertificationName());
        dto.setCertificationNo(info.getCertificationNo());
        dto.setCourseDuration(info.getCourseDuration());
        dto.setIssuedBy(info.getIssuedBy());
        dto.setCountry(info.getCountry());
        dto.setCertifiedDate(info.getCertifiedDate());
        dto.setExpiryDate(info.getExpiryDate());
        dto.setNotes(info.getNotes());

        return dto;
    }

    @Override
    public ActionResult saveEmployeeJobHistory(EmployeeJobHistoryDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
            EmployeeInfo employeeInfo = employeeInfoRepository.findOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            EmploymentHistory info = jobHistoryInfoRepository.get(dto.getId());
            if(info == null)
                info = new EmploymentHistory();

            info.setEmployeeInfo(employeeInfo);
      //      info.setResumeCode(dto.getResumeCode());
            info.setCompanyName(dto.getCompanyName());
            info.setCountry(dto.getCountry());
            info.setCity(dto.getCity());
            info.setAddress(dto.getAddress());
            info.setDesignations(dto.getDesignation());
            info.setStartDate(dto.getStartDate());
            info.setEndDate(dto.getEndDate());
            info.setJobResponsibility(dto.getJobResponsibility());
            info.setStartSalary(dto.getStartingSalary());
            info.setEndSalary(dto.getClosingSalary());
            info.setCurrency(dto.getCurrency());
            info.setEndDate(dto.getEndDate());
            info.setMobile(dto.getPhone());
            info.setResignCause(dto.getResignCause());

            jobHistoryInfoRepository.save(info);

            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("EmployeeJobHistory saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public List<EmployeeJobHistoryDTO> getEmploymentHistoryInfoList(String pEmployeeCode) {
        List<EmployeeJobHistoryDTO> dtoList = new ArrayList<>();
        EmployeeJobHistoryDTO dto = new EmployeeJobHistoryDTO();
        List<EmploymentHistory> infoList = jobHistoryInfoRepository.getEmploymentHistoryByEmpCode(pEmployeeCode);
        for(int i = 0; i < infoList.size(); i++){
            dtoList.add(getEmployeeJobHistoryDTO(infoList.get(i)));
        }
        return  dtoList;
    }

    @Override
    public EmployeeJobHistoryDTO getEmploymentHistoryInfo(Long Id) {
        return getEmployeeJobHistoryDTO(jobHistoryInfoRepository.get(Id));

    }
    private EmployeeJobHistoryDTO getEmployeeJobHistoryDTO(EmploymentHistory info){
        EmployeeJobHistoryDTO dto = new EmployeeJobHistoryDTO();
        if (info == null) {
            throw new RuntimeException("Employee Code not available");
        }
        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setId(info.getId());
//        dto.setResumeCode(info.getResumeCode());
        dto.setCompanyName(info.getCompanyName());
        dto.setCountry(info.getCountry());
        dto.setCity(info.getCity());
        dto.setAddress(info.getAddress());
        dto.setDesignation(info.getDesignations());
        dto.setStartDate(info.getStartDate());
        dto.setEndDate(info.getEndDate());
        dto.setJobResponsibility(info.getJobResponsibility());
        dto.setStartingSalary(info.getStartSalary());
        dto.setClosingSalary(info.getEndSalary());
        dto.setCurrency(info.getCurrency());
        dto.setEndDate(info.getEndDate());
        dto.setPhone(info.getMobile());
        dto.setResignCause(info.getResignCause());

        return dto;
    }
    @Override
    public ActionResult saveLanguage(EmployeeLanguageDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
            EmployeeInfo employeeInfo = employeeInfoRepository.findOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            Language info = languageInfoRepository.get(dto.getId());
            if(info == null) {
                info = new Language();
                info.setEmployeeInfo(employeeInfo);
            }
            info.setLanguageName(dto.getLanguageName());
            info.setWriting(dto.getWriting());
            info.setReading(dto.getReading());
            info.setSpoken(dto.getSpoken());
            info.setListening(dto.getListening());
            info.setMotherLanguage(dto.isMotherLanguage());
            info.setNotes(dto.getNotes());

            languageInfoRepository.save(info);

            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("Language Info saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public List<EmployeeLanguageDTO> getEmployeeLanguageInfoList(String pEmployeeCode) {
        List<EmployeeLanguageDTO> dtoList = new ArrayList<>();
        List<Language> infoList = languageInfoRepository.getAllByEmployeeCode(pEmployeeCode);
        for(int i = 0; i < infoList.size(); i++){
            dtoList.add(getEmployeeLanguageDTO(infoList.get(i)));
        }
        return dtoList;
    }

    @Override
    public EmployeeLanguageDTO getEmployeeLanguageInfo(Long Id) {

        return getEmployeeLanguageDTO(languageInfoRepository.get(Id));
    }

    private EmployeeLanguageDTO getEmployeeLanguageDTO(Language info){
        EmployeeLanguageDTO dto = new EmployeeLanguageDTO();

        if (info == null) {
            throw new RuntimeException("Employee Code not available");
        }
        dto.setId(info.getId());
        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setLanguageName(info.getLanguageName());
        dto.setWriting(info.getWriting());
        dto.setReading(info.getReading());
        dto.setSpoken(info.getSpoken());
        dto.setListening(info.getListening());
        dto.setMotherLanguage(info.isMotherLanguage());
        dto.setNotes(info.getNotes());

        return dto;
    }



    @Override
    public ActionResult saveFamilyInfo(EmployeeFamilyInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
            EmployeeInfo employeeInfo = employeeInfoRepository.findOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            EmployeeFamilyInfo info = familyInfoRepository.getFamilyByEmpCode(dto.getEmployeeCode());
            if(info == null) {
                info = new EmployeeFamilyInfo();
                info.setEmployeeInfo(employeeInfo);
            }
            info.setAddress(dto.getAddress());
            info.setCapablePerson(dto.getEarningCapablePerson());
            info.setCity(dto.getCity());
            info.setPhone(dto.getPhone());
            info.setCountry(dto.getCountry());
            info.setFamilyExpense(dto.getFamilyExpense());
            info.setFamilyIncome(dto.getFamilyIncome());
            info.setFamilyMembers(dto.getNoOfFamilyMember());

            familyInfoRepository.save(info);

            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("Employee Family Info saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public EmployeeFamilyInfoDTO getEmployeeFamilyInfo(String pEmployeeCode) {
        EmployeeFamilyInfoDTO dto = new EmployeeFamilyInfoDTO();
        EmployeeFamilyInfo info = familyInfoRepository.getFamilyByEmpCode(pEmployeeCode);
        if(info == null)
            throw new RuntimeException("Employee Code not available");

        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setAddress(info.getAddress());
        dto.setEarningCapablePerson(info.getCapablePerson());
        dto.setCity(info.getCity());
        dto.setCountry(info.getCountry());
        dto.setPhone(info.getPhone());
        dto.setFamilyExpense(info.getFamilyExpense());
        dto.setFamilyIncome(info.getFamilyIncome());
        dto.setNoOfFamilyMember(info.getFamilyMembers());

        return  dto;
    }

    @Override
    public ActionResult savePFNominee(EmployeeNomineeInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
            EmployeeInfo employeeInfo = employeeInfoRepository.findOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            PFNominee nominee = pfNomineeRepository.get(dto.getEmployeeCode());
            if(nominee == null)
                nominee = new PFNominee();
            nominee.setEmployeeInfo(employeeInfo);
            nominee.setAddress(dto.getAddress());
            nominee.setNomineeName(dto.getName());
            nominee.setNomineeImage(dto.getNomineePic());
            nominee.setRelationship(dto.getRelationship());

            pfNomineeRepository.save(nominee);
            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("PFNominee saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public EmployeeNomineeInfoDTO getPFNomineeInfo(String pEmployeeCode) {
        EmployeeNomineeInfoDTO dto = new EmployeeNomineeInfoDTO();
        PFNominee nominee = pfNomineeRepository.get(pEmployeeCode);
        if(nominee == null)
            throw new RuntimeException("Employee Code not available");

        dto.setEmployeeCode(nominee.getEmployeeInfo().getEmployeeCode());
        dto.setAddress(nominee.getAddress());
        dto.setName(nominee.getNomineeName());
        dto.setNomineePic(nominee.getNomineeImage());
        dto.setRelationship(nominee.getRelationship());

        return dto;
    }

    @Override
    public ActionResult saveInsuranceNominee(EmployeeNomineeInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
            EmployeeInfo employeeInfo = employeeInfoRepository.findOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }

            InsuranceNominee nominee = insuranceNomineeRepository.get(dto.getEmployeeCode());
            if(nominee == null)
                nominee = new InsuranceNominee();
            nominee.setEmployeeInfo(employeeInfo);
            nominee.setAddress(dto.getAddress());
            nominee.setNomineeName(dto.getName());
            nominee.setNomineeImage(dto.getNomineePic());
            nominee.setRelationship(dto.getRelationship());

            insuranceNomineeRepository.save(nominee);

            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("PFNominee saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public EmployeeNomineeInfoDTO getInsuranceNomineeInfo(String pEmployeeCode) {
        EmployeeNomineeInfoDTO dto = new EmployeeNomineeInfoDTO();
        InsuranceNominee nominee = insuranceNomineeRepository.get(pEmployeeCode);
        if(nominee == null)
            throw new RuntimeException("Employee Code not available");

        dto.setEmployeeCode(nominee.getEmployeeInfo().getEmployeeCode());
        dto.setAddress(nominee.getAddress());
        dto.setName(nominee.getNomineeName());
        dto.setNomineePic(nominee.getNomineeImage());
        dto.setRelationship(nominee.getRelationship());

        return dto;
    }

    @Override
    public ActionResult saveMedicalNominee(EmployeeNomineeInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
            EmployeeInfo employeeInfo = employeeInfoRepository.findOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            MedicalNominee nominee = medicalNomineeRepository.get(dto.getEmployeeCode());
            if(nominee == null)
                nominee = new MedicalNominee();
            nominee.setEmployeeInfo(employeeInfo);
            nominee.setAddress(dto.getAddress());
            nominee.setNomineeName(dto.getName());
            nominee.setNomineeImage(dto.getNomineePic());
            nominee.setRelationship(dto.getRelationship());

            medicalNomineeRepository.save(nominee);

            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("PFNominee saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public EmployeeNomineeInfoDTO getMedicalNomineeInfo(String pEmployeeCode) {
        EmployeeNomineeInfoDTO dto = new EmployeeNomineeInfoDTO();
        MedicalNominee nominee = medicalNomineeRepository.get(pEmployeeCode);
        if(nominee == null)
            throw new RuntimeException("Employee Code not available");

        dto.setEmployeeCode(nominee.getEmployeeInfo().getEmployeeCode());
        dto.setAddress(nominee.getAddress());
        dto.setName(nominee.getNomineeName());
        dto.setNomineePic(nominee.getNomineeImage());
        dto.setRelationship(nominee.getRelationship());

        return dto;
    }

    @Override
    public ActionResult saveGratuityNominee(EmployeeNomineeInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
            EmployeeInfo employeeInfo = employeeInfoRepository.findOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            GratuityNominee nominee = gratuityNomineeRepository.get(dto.getEmployeeCode());
            if(nominee == null)
                nominee = new GratuityNominee();
            nominee.setEmployeeInfo(employeeInfo);
            nominee.setAddress(dto.getAddress());
            nominee.setNomineeName(dto.getName());
            nominee.setNomineeImage(dto.getNomineePic());
            nominee.setRelationship(dto.getRelationship());

            gratuityNomineeRepository.save(nominee);

            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("PFNominee saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public EmployeeNomineeInfoDTO getGratuityNomineeInfo(String pEmployeeCode) {
        EmployeeNomineeInfoDTO dto = new EmployeeNomineeInfoDTO();
        GratuityNominee nominee = gratuityNomineeRepository.get(pEmployeeCode);
        if(nominee == null)
            throw new RuntimeException("Employee Code not available");

        dto.setEmployeeCode(nominee.getEmployeeInfo().getEmployeeCode());
        dto.setAddress(nominee.getAddress());
        dto.setName(nominee.getNomineeName());
        dto.setNomineePic(nominee.getNomineeImage());
        dto.setRelationship(nominee.getRelationship());

        return dto;
    }

    @Override
    public ActionResult saveNominee(EmployeeNomineeInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
            EmployeeInfo employeeInfo = employeeInfoRepository.findOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            Nominee nominee = nomineeRepository.get(dto.getEmployeeCode());
            if(nominee == null)
                nominee = new Nominee();
            nominee.setEmployeeInfo(employeeInfo);
            nominee.setNomineeName(dto.getName());
            nominee.setFatherName(dto.getFatherName());
            nominee.setMotherName(dto.getMotherName());
            nominee.setEmail(dto.getEmail());
            nominee.setPhone(dto.getPhone());
            nominee.setAddress(dto.getAddress());
            nominee.setNomineeImage(dto.getNomineePic());
            nominee.setRelationship(dto.getRelationship());
            nominee.setSignImage(dto.getSign());

            nomineeRepository.save(nominee);
            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("PFNominee saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public EmployeeNomineeInfoDTO getNomineeInfo(String pEmployeeCode) {
        EmployeeNomineeInfoDTO dto = new EmployeeNomineeInfoDTO();
        Nominee nominee = nomineeRepository.get(pEmployeeCode);
        if(nominee == null)
            throw new RuntimeException("Employee Code not available");

        dto.setEmployeeCode(pEmployeeCode);
        dto.setName(nominee.getNomineeName());
        dto.setFatherName(nominee.getFatherName());
        dto.setMotherName(nominee.getMotherName());
        dto.setEmail(nominee.getEmail());
        dto.setPhone(nominee.getPhone());
        dto.setAddress(nominee.getAddress());
        dto.setRelationship(nominee.getRelationship());
        dto.setNomineePic(nominee.getNomineeImage());
        dto.setSign(nominee.getSignImage());


        return dto;
    }

    @Override
    public ActionResult processEmployee() {
        ActionResult actionResult = new ActionResult();

        try {

            List<EmployeeReport> reports = employeeInfoRepository.getProcessableEmp();

            if(reports.size() > 0) {
                Thread t = new Thread(() -> {
                    employeeInfoRepository.deleteOldProcessableEmp();
                    bulkInsertEmployeeReportWithEntityManager(reports);

                    employeeInfoRepository.updateProcess();
                });
                t.start();
            }
            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("Process Started!");

        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }


    private void bulkInsertEmployeeReportWithEntityManager(List<EmployeeReport> tempList) {
        BulkInsetUtil.bulkInsertWithEntityManager(emf,tempList);
    }
}
