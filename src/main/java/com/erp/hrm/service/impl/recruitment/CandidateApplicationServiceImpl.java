package com.erp.hrm.service.impl.recruitment;

import com.erp.hrm.api.dto.*;
import com.erp.hrm.api.dto.EmployeeInfo.EmployeeInfoDTO;
import com.erp.hrm.api.dto.recruitment.*;
import com.erp.hrm.domain.*;
import com.erp.hrm.repository.recruitment.*;
import com.erp.hrm.service.recruitment.CandidateApplicationService;
import com.erp.hrm.util.ActionResult;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
public class CandidateApplicationServiceImpl implements CandidateApplicationService {

    private CandidateApplicationRepository generalInfoRepository;
    private CandidateEmergencyInfoRepository emergencyInfoRepository;
    private CandidateEducationInfoRepository educationInfoRepository;
    private CandidatePQualificationInfoRepository pQualificationInfoRepository;
    private CandidateLanguageInfoRepository languageInfoRepository;
    private CandidateJobHistoryInfoRepository jobHistoryInfoRepository;
    private CandidateFamilyInfoRepository familyInfoRepository;
    private CandidateNomineeRepository nomineeRepository;
    private KnownEmployeeInfoRepository knownEmployeeInfoRepository;

    public CandidateApplicationServiceImpl(CandidateApplicationRepository generalInfoRepository,
                                           CandidateEmergencyInfoRepository emergencyInfoRepository,
                                           CandidateEducationInfoRepository educationInfoRepository,
                                           CandidatePQualificationInfoRepository pQualificationInfoRepository,
                                           CandidateLanguageInfoRepository languageInfoRepository,
                                           CandidateJobHistoryInfoRepository jobHistoryInfoRepository,
                                           CandidateFamilyInfoRepository familyInfoRepository,
                                           CandidateNomineeRepository nomineeRepository,
                                           KnownEmployeeInfoRepository knownEmployeeInfoRepository) {
        this.generalInfoRepository = generalInfoRepository;
        this.emergencyInfoRepository = emergencyInfoRepository;
        this.educationInfoRepository = educationInfoRepository;
        this.pQualificationInfoRepository = pQualificationInfoRepository;
        this.languageInfoRepository = languageInfoRepository;
        this.jobHistoryInfoRepository = jobHistoryInfoRepository;
        this.familyInfoRepository = familyInfoRepository;
        this.nomineeRepository = nomineeRepository;
        this.knownEmployeeInfoRepository = knownEmployeeInfoRepository;
    }

    private String getAutoGeneratedEmployeeCode(){
        //To Do
        int totalNumberOfEmp = (int) generalInfoRepository.count();
        int currentEmpNumber = totalNumberOfEmp + 1;
        String vEmployeeCode = "EMP"+currentEmpNumber;
        return vEmployeeCode;
    }

    @Override
    public CandidateGridDTO getAllCandidateInfo(PageableDTO pageableDTO) {

        CandidateGridDTO gridDTO = new CandidateGridDTO();
//        Pageable pageable = new PageRequest(
//                pageableDTO.getPage(),
//                pageableDTO.getSize(),
//                new Sort(new Sort.Order(pageableDTO.getSortOn(),pageableDTO.getSortBy()))
//        );
        
        Pageable pageable = PageRequest.of(pageableDTO.getPage(), pageableDTO.getSize(), 
        		Sort.by(pageableDTO.getSortOn(),pageableDTO.getSortBy())); ///this method need to update

        String pEmpCodeFilter = "All",pEmpCodeOpt = "contains",pPunchCardFilter = "All",pPunchCardOpt = "contains";
        String pFirstNameFilter = "All",pFirstNameOpt = "contains",pUnitFilter = "All",pUnitFilterOpt = "contains";
        String pDepartmentFilter = "All",pDepartmentOpt = "contains",pDesignationFilter = "All",pDesignationOpt = "contains";
        String pStaffCategoryFilter = "All",pStaffCategoryOpt = "contains",pAdvanceSearchFilter = "All",pAdvanceSearchOpt = "contains";

        if(pageableDTO.getFilters() !="") {
            String[] filtersObj = pageableDTO.getFilters().split("~");
            for (String filters : filtersObj) {
                String[] filter = filters.split("_");

                if(filter[0].contains("employeeCode")){
                    pEmpCodeFilter = filter[1];
                    pEmpCodeOpt = filter[2];
                }

                if(filter[0].contains("punchCardNo")){
                    pPunchCardFilter = filter[1];
                    pPunchCardOpt = filter[2];
                }

                if(filter[0].contains("firstName")){
                    pFirstNameFilter = filter[1];
                    pFirstNameOpt = filter[2];
                }

                if(filter[0].contains("unit")){
                    pUnitFilter = filter[1];
                    pUnitFilterOpt = filter[2];
                }

                if(filter[0].contains("department")){
                    pDepartmentFilter = filter[1];
                    pDepartmentOpt = filter[2];
                }

                if(filter[0].contains("designation")){
                    pDesignationFilter = filter[1];
                    pDesignationOpt = filter[2];
                }

                if(filter[0].contains("staffCategory")){
                    pStaffCategoryFilter = filter[1];
                    pStaffCategoryOpt = filter[2];
                }

                if(filter[0].contains("advanceSearchFiled")){
                    pAdvanceSearchFilter = filter[1];
                    pAdvanceSearchOpt = filter[2];
                }
            }
        }
        Page<Object[]> candidateInfos = null;

        if(pageableDTO.getFilters().contains("advanceSearchFiled")){
            candidateInfos = generalInfoRepository.getAllCandidateAdvanceSearchByFilters(pAdvanceSearchFilter,"all",pageable);
        }
        else {
            candidateInfos = generalInfoRepository.getAllCandidateInfo(pageable);;
        }


        List<InterviewCardDTO> list = new ArrayList<>();
        for (Object[] empInfo : candidateInfos)
        {
            InterviewCardDTO cardDTO = new InterviewCardDTO();
            cardDTO.setEmployeeTempCode((String) empInfo[0]);
            cardDTO.setCandidateName(empInfo[2] == null ? "" : empInfo[2].toString() + " " + empInfo[3].toString());
            cardDTO.setBirthDateCertSubmit(false);
            cardDTO.setChairmanCertSubmit(false);
            cardDTO.setGivenFN(false);


            list.add(cardDTO);
        }


        gridDTO.setTotal((int) candidateInfos.getTotalElements());
        gridDTO.setData(list);
        return gridDTO;
    }

    @Override
    public ActionResult saveGeneralInfo(CandidateGeneralInfoDTO dto) {
        String successMessage = "Candidate updated successfully!";
        ActionResult actionResult = new ActionResult();

        try{
            EmployeeInfo info = null;
            if(dto.getEmployeeCode() != null)
//                info = generalInfoRepository.findOne(dto.getEmployeeCode());
            	info = generalInfoRepository.getOne(dto.getEmployeeCode());

            if(info == null){
                info = new EmployeeInfo();
                info.setEmployeeCode(this.getAutoGeneratedEmployeeCode());
                successMessage = "Candidate saved successfully!";
            }
            info.setFirstName(dto.getFirstName());
            info.setMiddleName(dto.getMiddleName());
            info.setLastName(dto.getLastName());
            info.setNickName(dto.getNickName());
            info.setSalutation(dto.getSalutation());
            info.setFathersName(dto.getFathersName());
            info.setMothersName(dto.getMothersName());
            info.setEmployeeStatus(dto.getEmployeeStatus());
            info.setNid(dto.getNid());
            info.setDisplayEmployeeCode(dto.getDisplayEmployeeCode());
            info.setPunchCardNo(dto.getPunchCardNo());
            info.setEmployeeType(dto.getEmployeeType());
            info.setWorkerEmploymentType(dto.getWorkerEmploymentType());
            info.setPresentAddress(dto.getPresentAddress());
            info.setPresentPS(dto.getPresentPS());
            info.setPresentZIPCode(dto.getPresentZIPCode());
            info.setPresentDistrict(dto.getPresentDistrict());
            info.setPresentCountry(dto.getPresentCountry());

            try {
                info.setPermanentSame(dto.getIsPermanentSame());
            }
            catch (Exception e){
                info.setPermanentSame(false);
            }

            info.setPermanentAddress(dto.getPermanentAddress());
            info.setPermanentPS(dto.getPermanentPS());
            info.setPermanentZIPCode(dto.getPermanentZIPCode());
            info.setPermanentDistrict(dto.getPermanentDistrict());
            info.setPermanentCountry(dto.getPermanentCountry());
            info.setMaritalStatus(dto.getMaritalStatus());
            info.setSpouseName(dto.getSpouseName());
            info.setSpouseOccupation(dto.getSpouseOccupation());
            info.setNoOfChildren(dto.getNoOfChildren());
            info.setDob(dto.getDob());
            info.setGender(dto.getGender());
            info.setReligion(dto.getReligion());
            info.setNationality(dto.getNationality());
            info.setBloodGroup(dto.getBloodGroup());
            info.setPhone(dto.getPhone());
            info.setEmail(dto.getEmail());
            info.setReferenceAddress(dto.getReferenceAddress());
            info.setPersonalRemarks(dto.getPersonalRemarks());
            info.setEmpImage(dto.getEmpImage());
            info.setEmpSignature(dto.getEmpSignature());
            info.setDelete(false);
            info.setCandidate(true);
            info.setWentToJailForCrime(dto.isWentToJailForCrime());
            info.setApplyForPosition(dto.getApplyForPosition());

            try {
                info.setSubmitNID(dto.isSubmitNID());
            }
            catch (Exception e){
                info.setSubmitNID(false);
            }
            try {
                info.setSubmitBirthDateCertificate(dto.isSubmitBirthDateCertificate());
            }
            catch (Exception e){
                info.setSubmitBirthDateCertificate(false);
            }
            try {
                info.setSubmitChairmanCertificate(dto.isSubmitChairmanCertificate());
            }
            catch (Exception e){
                info.setSubmitChairmanCertificate(false);
            }

            info.setNidCard(dto.getNidName());
            info.setBirthDateCertificate(dto.getBirthDateCertificateName());
            info.setChairmanCertificate(dto.getChairmanCertificateName());

            try {
                info.setHaveKnownWorker(dto.isHaveKnownWorker());
            }
            catch (Exception e){
                info.setHaveKnownWorker(false);
            }

            generalInfoRepository.save(info);
            //Set custom message if success
            actionResult.setEmployeeCode(info.getEmployeeCode());
            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage(successMessage);
        }
        catch (Exception e){
            //Set custom message if error
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }

        return actionResult;
    }

    @Override
    public CandidateGeneralInfoDTO getEmployeeInfo(String pEmployeeCode) {
        CandidateGeneralInfoDTO dto = new CandidateGeneralInfoDTO();

//        EmployeeInfo info = generalInfoRepository.findOne(pEmployeeCode);
        EmployeeInfo info = generalInfoRepository.getOne(pEmployeeCode);
        if(info == null)
            throw new RuntimeException("Employee Not available");
        dto.setEmployeeCode(info.getEmployeeCode());
        dto.setFirstName(info.getFirstName());
        dto.setMiddleName(info.getMiddleName());
        dto.setLastName(info.getLastName());
        dto.setNickName(info.getNickName());
        dto.setSalutation(info.getSalutation());
        dto.setFathersName(info.getFathersName());
        dto.setMothersName(info.getMothersName());
        dto.setEmployeeStatus(info.getEmployeeStatus());
        dto.setNid(info.getNid());
        dto.setDisplayEmployeeCode(info.getDisplayEmployeeCode());
        dto.setPunchCardNo(info.getPunchCardNo());
        dto.setEmployeeType(info.getEmployeeType());
        dto.setWorkerEmploymentType(info.getWorkerEmploymentType());
        dto.setPresentAddress(info.getPresentAddress());
        dto.setPresentPS(info.getPresentPS());
        dto.setPresentZIPCode(info.getPresentZIPCode());
        dto.setPresentDistrict(info.getPresentDistrict());
        dto.setPresentCountry(info.getPresentCountry());

        try {
            dto.setIsPermanentSame(info.isPermanentSame());
        }
        catch (Exception e){
            dto.setIsPermanentSame(false);
        }

        dto.setPermanentAddress(info.getPermanentAddress());
        dto.setPermanentPS(info.getPermanentPS());
        dto.setPermanentZIPCode(info.getPermanentZIPCode());
        dto.setPermanentDistrict(info.getPermanentDistrict());
        dto.setPermanentCountry(info.getPermanentCountry());
        dto.setMaritalStatus(info.getMaritalStatus());
        dto.setSpouseName(info.getSpouseName());
        dto.setSpouseOccupation(info.getSpouseOccupation());
        dto.setNoOfChildren(info.getNoOfChildren());
        dto.setDob(info.getDob());
        dto.setGender(info.getGender());
        dto.setReligion(info.getReligion());
        dto.setNationality(info.getNationality());
        dto.setBloodGroup(info.getBloodGroup());
        dto.setPhone(info.getPhone());
        dto.setEmail(info.getEmail());
        dto.setReferenceAddress(info.getReferenceAddress());
        dto.setPersonalRemarks(info.getPersonalRemarks());
        dto.setEmpImage(info.getEmpImage());
        dto.setEmpSignature(info.getEmpSignature());
        dto.setDelete(false);

        try {
            dto.setSubmitNID(info.isSubmitNID());
        }
        catch (Exception e){
            dto.setSubmitNID(false);
        }
        try {
            dto.setSubmitBirthDateCertificate(info.isSubmitBirthDateCertificate());
        }
        catch (Exception e){
            dto.setSubmitBirthDateCertificate(false);
        }
        try {
            dto.setSubmitChairmanCertificate(info.isSubmitChairmanCertificate());
        }
        catch (Exception e){
            dto.setSubmitChairmanCertificate(false);
        }

        dto.setNidName(info.getNidCard());
        dto.setBirthDateCertificateName(info.getBirthDateCertificate());
        dto.setChairmanCertificateName(info.getChairmanCertificate());

        try {
            dto.setHaveKnownWorker(info.isHaveKnownWorker());
        }
        catch (Exception e){
            dto.setHaveKnownWorker(false);
        }

        return dto;
    }

    @Override
    public ActionResult saveEmergencyInfo(CandidateEmergencyInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
//            EmployeeInfo employeeInfo = generalInfoRepository.findOne(dto.getEmployeeCode());
        	EmployeeInfo employeeInfo = generalInfoRepository.getOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            EmergencyPersonInfo info = emergencyInfoRepository.get(dto.getEmployeeCode());
            if(info == null) {
                info = new EmergencyPersonInfo();
                info.setEmployeeInfo(employeeInfo);
            }
            info.setName(dto.getName());
            info.setAddress(dto.getAddress());
            info.setPhone(dto.getPhone());
            info.setEmail(dto.getEmail());
            info.setRelationship(dto.getRelationship());
            info.setSequenceNo(1);

            emergencyInfoRepository.save(info);
            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("Emergency Person Info saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public CandidateEmergencyInfoDTO getEmergencyPersonInfo(String pEmployeeCode) {
        return getCandidateEmergencyInfoDTO(emergencyInfoRepository.get(pEmployeeCode));
    }

    private CandidateEmergencyInfoDTO getCandidateEmergencyInfoDTO(EmergencyPersonInfo info) {

        if (info == null) {
            throw new RuntimeException("Employee Code not available");
        }

        CandidateEmergencyInfoDTO dto = new CandidateEmergencyInfoDTO();
     //   dto.setId(info.getId());
        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setName(info.getName());
        dto.setAddress(info.getAddress());
        dto.setPhone(info.getPhone());
        dto.setEmail(info.getEmail());
        dto.setRelationship(info.getRelationship());
     //   dto.setSequence(info.getSequenceNo());

        return  dto;
    }

    @Override
    public ActionResult saveEducationalInfo(CandidateEducationInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
//            EmployeeInfo employeeInfo = generalInfoRepository.findOne(dto.getEmployeeCode());
        	EmployeeInfo employeeInfo = generalInfoRepository.getOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            EducationInfo info = educationInfoRepository.get(dto.getId());
            if(info == null) {
                info = new EducationInfo();
                info.setEmployeeInfo(employeeInfo);
            }
            info.setExamName(dto.getExamName());
            info.setInstituteName(dto.getInstituteName());
            info.setWhichGroup(dto.getWhichGroup());
            info.setExaminationRoll(dto.getExaminationRoll());
            info.setRegistrationNo(dto.getRegistrationNo());
            info.setResult(dto.getResult());
            info.setCountry(dto.getCountry());
            info.setExamYear(dto.getExamYear());
            info.setCGPA(false);

            educationInfoRepository.save(info);
            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("Education Info saved successfully!");

        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public List<CandidateEducationInfoDTO> getEducationInfoList(String pEmployeeCode) {
        List<CandidateEducationInfoDTO> dtoList = new ArrayList<>();
        List<EducationInfo> infoList = educationInfoRepository.getAllByEmpCode(pEmployeeCode);

        for(int i = 0; i < infoList.size(); i++){
            dtoList.add(getEmployeeEducationInfoDTO(infoList.get(i)));
        }

        return  dtoList;
    }

    @Override
    public CandidateEducationInfoDTO getEducationInfo(Long Id) {
        return getEmployeeEducationInfoDTO(educationInfoRepository.get(Id));
    }

    private  CandidateEducationInfoDTO getEmployeeEducationInfoDTO( EducationInfo info){
        CandidateEducationInfoDTO dto = new CandidateEducationInfoDTO();

        if (info == null) {
            throw new RuntimeException("Employee Code not available");
        }
        dto.setId(info.getId());
        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setExamName(info.getExamName());
        dto.setInstituteName(info.getInstituteName());
        dto.setWhichGroup(info.getWhichGroup());
        dto.setExaminationRoll(info.getExaminationRoll());
        dto.setRegistrationNo(info.getRegistrationNo());
        dto.setResult(info.getResult());
        dto.setCountry(info.getCountry());
        dto.setExamYear(info.getExamYear());


        return  dto;
    }

    @Override
    public ActionResult savePQualificationInfo(CandidateProfessionalQualificationDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
//            EmployeeInfo employeeInfo = generalInfoRepository.findOne(dto.getEmployeeCode());
        	EmployeeInfo employeeInfo = generalInfoRepository.getOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            ProfessionalQualification info = pQualificationInfoRepository.get(dto.getId());
            if(info == null)
                info = new ProfessionalQualification();
            info.setEmployeeInfo(employeeInfo);
            info.setCertificationName(dto.getCertificationName());
            info.setCertificationNo(dto.getCertificationNo());
            info.setCourseDuration(dto.getCourseDuration());
            info.setIssuedBy(dto.getIssuedBy());
            info.setCountry(dto.getCountry());
            info.setCertifiedDate(dto.getCertifiedDate());
            info.setExpiryDate(dto.getExpiryDate());
            info.setPassingYear(0);
            info.setNotes(dto.getNotes());

            pQualificationInfoRepository.save(info);

            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("ProfessionQualification saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public List<CandidateProfessionalQualificationDTO> getPQualificationInfoList(String pEmployeeCode) {
        List<CandidateProfessionalQualificationDTO> dtoList = new ArrayList<>();

        List<ProfessionalQualification> infoList = pQualificationInfoRepository.getAllByEmpCode(pEmployeeCode);

        for(int i = 0; i < infoList.size(); i++){
            dtoList.add(getCandidateProfessionalQualificationDTO(infoList.get(i)));
        }
        return  dtoList;
    }
    @Override
    public CandidateProfessionalQualificationDTO getPQualificationInfo(Long Id) {
        return getCandidateProfessionalQualificationDTO(pQualificationInfoRepository.getOne(Id));

    }
    private CandidateProfessionalQualificationDTO getCandidateProfessionalQualificationDTO( ProfessionalQualification info){
        CandidateProfessionalQualificationDTO dto = new CandidateProfessionalQualificationDTO();

        if (info == null) {
            throw new RuntimeException("Employee Code not available");
        }
        dto.setId(info.getId());
        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setCertificationName(info.getCertificationName());
        dto.setCertificationNo(info.getCertificationNo());
        dto.setCourseDuration(info.getCourseDuration());
        dto.setIssuedBy(info.getIssuedBy());
        dto.setCountry(info.getCountry());
        dto.setCertifiedDate(info.getCertifiedDate());
        dto.setExpiryDate(info.getExpiryDate());
        dto.setNotes(info.getNotes());

        return dto;
    }

    @Override
    public ActionResult saveEmployeeJobHistory(CandidateJobHistoryDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
//            EmployeeInfo employeeInfo = generalInfoRepository.findOne(dto.getEmployeeCode());
        	EmployeeInfo employeeInfo = generalInfoRepository.getOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            EmploymentHistory info = jobHistoryInfoRepository.get(dto.getId());
            if(info == null)
                info = new EmploymentHistory();

            info.setEmployeeInfo(employeeInfo);
      //      info.setResumeCode(dto.getResumeCode());
            info.setCompanyName(dto.getCompanyName());
            info.setCountry(dto.getCountry());
            info.setCity(dto.getCity());
            info.setAddress(dto.getAddress());
            info.setDesignations(dto.getDesignation());
            info.setStartDate(dto.getStartDate());
            info.setEndDate(dto.getEndDate());
            info.setJobResponsibility(dto.getJobResponsibility());
            info.setStartSalary(dto.getStartingSalary());
            info.setEndSalary(dto.getClosingSalary());
            info.setCurrency(dto.getCurrency());
            info.setEndDate(dto.getEndDate());
            info.setMobile(dto.getPhone());
            info.setResignCause(dto.getResignCause());

            jobHistoryInfoRepository.save(info);

            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("EmployeeJobHistory saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public List<CandidateJobHistoryDTO> getEmploymentHistoryInfoList(String pEmployeeCode) {
        List<CandidateJobHistoryDTO> dtoList = new ArrayList<>();
        CandidateJobHistoryDTO dto = new CandidateJobHistoryDTO();
        List<EmploymentHistory> infoList = jobHistoryInfoRepository.getEmploymentHistoryByEmpCode(pEmployeeCode);
        for(int i = 0; i < infoList.size(); i++){
            dtoList.add(getCandidateJobHistoryDTO(infoList.get(i)));
        }
        return  dtoList;
    }

    @Override
    public CandidateJobHistoryDTO getEmploymentHistoryInfo(Long Id) {
        return getCandidateJobHistoryDTO(jobHistoryInfoRepository.get(Id));

    }
    private CandidateJobHistoryDTO getCandidateJobHistoryDTO(EmploymentHistory info){
        CandidateJobHistoryDTO dto = new CandidateJobHistoryDTO();
        if (info == null) {
            throw new RuntimeException("Employee Code not available");
        }
        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setId(info.getId());
//        dto.setResumeCode(info.getResumeCode());
        dto.setCompanyName(info.getCompanyName());
        dto.setCountry(info.getCountry());
        dto.setCity(info.getCity());
        dto.setAddress(info.getAddress());
        dto.setDesignation(info.getDesignations());
        dto.setStartDate(info.getStartDate());
        dto.setEndDate(info.getEndDate());
        dto.setJobResponsibility(info.getJobResponsibility());
        dto.setStartingSalary(info.getStartSalary());
        dto.setClosingSalary(info.getEndSalary());
        dto.setCurrency(info.getCurrency());
        dto.setEndDate(info.getEndDate());
        dto.setPhone(info.getMobile());
        dto.setResignCause(info.getResignCause());

        return dto;
    }

    @Override
    public ActionResult saveLanguage(CandidateLanguageDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
//            EmployeeInfo employeeInfo = generalInfoRepository.findOne(dto.getEmployeeCode());
        	EmployeeInfo employeeInfo = generalInfoRepository.getOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            Language info = languageInfoRepository.get(dto.getId());
            if(info == null) {
                info = new Language();
                info.setEmployeeInfo(employeeInfo);
            }
            info.setLanguageName(dto.getLanguageName());
            info.setWriting(dto.getWriting());
            info.setReading(dto.getReading());
            info.setSpoken(dto.getSpoken());
            info.setListening(dto.getListening());
            info.setMotherLanguage(dto.isMotherLanguage());
            info.setNotes(dto.getNotes());

            languageInfoRepository.save(info);

            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("Language Info saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public List<CandidateLanguageDTO> getEmployeeLanguageInfoList(String pEmployeeCode) {
        List<CandidateLanguageDTO> dtoList = new ArrayList<>();
        List<Language> infoList = languageInfoRepository.getAllByEmployeeCode(pEmployeeCode);
        for(int i = 0; i < infoList.size(); i++){
            dtoList.add(getCandidateLanguageDTO(infoList.get(i)));
        }
        return dtoList;
    }

    @Override
    public CandidateLanguageDTO getEmployeeLanguageInfo(Long Id) {

        return getCandidateLanguageDTO(languageInfoRepository.get(Id));
    }

    private CandidateLanguageDTO getCandidateLanguageDTO(Language info){
        CandidateLanguageDTO dto = new CandidateLanguageDTO();

        if (info == null) {
            throw new RuntimeException("Employee Code not available");
        }
        dto.setId(info.getId());
        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setLanguageName(info.getLanguageName());
        dto.setWriting(info.getWriting());
        dto.setReading(info.getReading());
        dto.setSpoken(info.getSpoken());
        dto.setListening(info.getListening());
        dto.setMotherLanguage(info.isMotherLanguage());
        dto.setNotes(info.getNotes());

        return dto;
    }



    @Override
    public ActionResult saveFamilyInfo(CandidateFamilyInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
//            EmployeeInfo employeeInfo = generalInfoRepository.findOne(dto.getEmployeeCode());
        	EmployeeInfo employeeInfo = generalInfoRepository.getOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            EmployeeFamilyInfo info = familyInfoRepository.getFamilyByEmpCode(dto.getEmployeeCode());
            if(info == null) {
                info = new EmployeeFamilyInfo();
                info.setEmployeeInfo(employeeInfo);
            }
            info.setAddress(dto.getAddress());
            info.setCapablePerson(dto.getEarningCapablePerson());
            info.setCity(dto.getCity());
            info.setPhone(dto.getPhone());
            info.setCountry(dto.getCountry());
            info.setFamilyExpense(dto.getFamilyExpense());
            info.setFamilyIncome(dto.getFamilyIncome());
            info.setFamilyMembers(dto.getNoOfFamilyMember());

            familyInfoRepository.save(info);

            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("Employee Family Info saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public CandidateFamilyInfoDTO getEmployeeFamilyInfo(String pEmployeeCode) {
        CandidateFamilyInfoDTO dto = new CandidateFamilyInfoDTO();
        EmployeeFamilyInfo info = familyInfoRepository.getFamilyByEmpCode(pEmployeeCode);
        if(info == null)
            throw new RuntimeException("Employee Code not available");

        dto.setEmployeeCode(info.getEmployeeInfo().getEmployeeCode());
        dto.setAddress(info.getAddress());
        dto.setEarningCapablePerson(info.getCapablePerson());
        dto.setCity(info.getCity());
        dto.setCountry(info.getCountry());
        dto.setPhone(info.getPhone());
        dto.setFamilyExpense(info.getFamilyExpense());
        dto.setFamilyIncome(info.getFamilyIncome());
        dto.setNoOfFamilyMember(info.getFamilyMembers());

        return  dto;
    }

    @Override
    public ActionResult saveNominee(CandidateNomineeInfoDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
//            EmployeeInfo employeeInfo = generalInfoRepository.findOne(dto.getEmployeeCode());
        	EmployeeInfo employeeInfo = generalInfoRepository.getOne(dto.getEmployeeCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Employee Code not available");
            }
            Nominee nominee = nomineeRepository.get(dto.getEmployeeCode());
            if(nominee == null)
                nominee = new Nominee();
            nominee.setEmployeeInfo(employeeInfo);
            nominee.setNomineeName(dto.getName());
            nominee.setFatherName(dto.getFatherName());
            nominee.setMotherName(dto.getMotherName());
            nominee.setEmail(dto.getEmail());
            nominee.setPhone(dto.getPhone());
            nominee.setAddress(dto.getAddress());
            nominee.setNomineeImage(dto.getNomineePic());
            nominee.setRelationship(dto.getRelationship());
            nominee.setSignImage(dto.getSign());

            nomineeRepository.save(nominee);
            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("PFNominee saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public CandidateNomineeInfoDTO getNomineeInfo(String pEmployeeCode) {
        CandidateNomineeInfoDTO dto = new CandidateNomineeInfoDTO();
        Nominee nominee = nomineeRepository.get(pEmployeeCode);
        if(nominee == null)
            throw new RuntimeException("Employee Code not available");

        dto.setEmployeeCode(pEmployeeCode);
        dto.setName(nominee.getNomineeName());
        dto.setFatherName(nominee.getFatherName());
        dto.setMotherName(nominee.getMotherName());
        dto.setEmail(nominee.getEmail());
        dto.setPhone(nominee.getPhone());
        dto.setAddress(nominee.getAddress());
        dto.setRelationship(nominee.getRelationship());
        dto.setNomineePic(nominee.getNomineeImage());
        dto.setSign(nominee.getSignImage());


        return dto;
    }

    @Override
    public ActionResult saveKnownEmployeeInfo(KnownEmployeeDTO dto) {
        ActionResult actionResult = new ActionResult();

        try {
//            EmployeeInfo employeeInfo = generalInfoRepository.findOne(dto.getEmployeeTempCode());
        	EmployeeInfo employeeInfo = generalInfoRepository.getOne(dto.getEmployeeTempCode());
            if (employeeInfo == null) {
                throw new RuntimeException("Temp Employee Code not available");
            }
            KnownEmployeeInfo knownEmployeeInfo= knownEmployeeInfoRepository.getByEmpCode(dto.getEmployeeTempCode());
            if(knownEmployeeInfo == null)
                knownEmployeeInfo = new KnownEmployeeInfo();

            knownEmployeeInfo.setEmployeeCode(employeeInfo.getEmployeeCode());
            knownEmployeeInfo.setKnownEmployeeCode(dto.getKnownEmployeeCode());
            knownEmployeeInfo.setName(dto.getName());
            knownEmployeeInfo.setPosition(dto.getPosition());
            knownEmployeeInfo.setSection(dto.getSection());
            knownEmployeeInfo.setPhone(dto.getPhone());

            knownEmployeeInfoRepository.save(knownEmployeeInfo);
            actionResult.setIsSuccess(true);
            actionResult.setSuccessMessage("Known Employee Info saved successfully!");
        }
        catch (Exception e){
            e.printStackTrace();
            actionResult.setIsSuccess(false);
            actionResult.setErrorMessage(e.getMessage());
        }
        return actionResult;
    }

    @Override
    public KnownEmployeeDTO getKnownEmployeeInfo(String pEmployeeCode) {
        KnownEmployeeDTO dto = new KnownEmployeeDTO();
        KnownEmployeeInfo knownEmployeeInfo= knownEmployeeInfoRepository.getByEmpCode(pEmployeeCode);
        if(knownEmployeeInfo == null)
            throw new RuntimeException("Known Employee info not available");

        dto.setEmployeeTempCode(knownEmployeeInfo.getEmployeeCode());
        dto.setKnownEmployeeCode(knownEmployeeInfo.getKnownEmployeeCode());
        dto.setName(knownEmployeeInfo.getName());
        dto.setPosition(knownEmployeeInfo.getPosition());
        dto.setSection(knownEmployeeInfo.getSection());
        dto.setPhone(knownEmployeeInfo.getPhone());

        return dto;
    }

    @Override
    public KnownEmployeeDTO searchKnownEmployeeInfo(String pEmployeeCode) {
        KnownEmployeeDTO dto = new KnownEmployeeDTO();
        Object[] objects= generalInfoRepository.getKnownEmployeeInfo(pEmployeeCode);
        if(objects.length == 0)
            throw new RuntimeException("Known Employee info not available");
        Object[] data = (Object []) objects[0];

        dto.setEmployeeTempCode(null);
        dto.setKnownEmployeeCode(pEmployeeCode);
        dto.setName(data[0] == null ? "" : data[0].toString() + " "+ data[1] == null ? "" : data[1].toString());
        dto.setPhone(data[4] == null ? "" : data[4].toString());
        dto.setSection(data[5] == null ? "" : data[5].toString());
        dto.setPosition(data[6] == null ? "" : data[6].toString());

        return dto;
    }
}
